apiVersion: batch/v1
kind: Job
metadata:
  name: job-monitor-cluster-install
  namespace: galaxy-mining
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "7"
spec:
  template:
    spec:
      containers:
      - command:
          - /bin/bash
          - "-c"
          - |
            /bin/bash <<'EOF'
            # Script to monitor ZTP (Zero Touch Provisioning) cluster installation
            # Author: Federico 'tele' Rossi <ferossi@redhat.com>
            #
            function logc() {
                txt=$1
                echo -e "[`date '+%m-%-d-%Y %H:%M:%S'`] $txt" 
            }
            ct=0
            INSTALL_STATUS=0

            # get agent name
            AGENT_NAME=`oc get agentclusterinstall -o template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'`

            START_DATE=`date +%s`
            logc "START Cluster monitor install"
            logc "============================="

            BM_CHECK=0
            logc "Check BareMetalNodes readiness"
            # Wait for BaremetalNodes to be ready and registered
            while [[ $ct -le 10 ]]; do
              res=`oc get bmh -o template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | xargs oc get bmh -o jsonpath='{.status.operationalStatus}' {} 2>/dev/null | grep error`
              if [[ $res -eq "error" ]]; then
                logc "Error detected on BMH:"
                oc get bmh -o template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | xargs oc get bmh -o jsonpath='{.status.errorMessage}'
                echo "\n"
              else
                logc "No errors detected"
                oc get bmh

                BM_CHECK=1
              fi

              if [[ $BM_CHECK -eq 1 ]]; then
                break;
              fi
             
              # wait 1 minute
              logc "Waiting to check baremetal nodes status.."
              sleep 60
              ct=$(($ct+1))
            done
            logc "Baremetal nodes ready for installation!"

            # reset counter
            ct=0
            # Give 1 hour for install time, timeout if cluster installation is not completed in 1 hour
            while [[ $ct -le 12 ]]; do
              
              # get install state
              INSTALL_STATUS=`oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.debugInfo.state}'`
              # get install state details
              INSTALL_STATUS_MSG=`oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.debugInfo.stateInfo}'`

              case $INSTALL_STATUS in
                
                insufficient)
                   logc "Cluster has not sufficient requirements to begin the installation"
                   ;;

                preparing-for-installation)
                   logc "Preparing for cluster installation"
                   ;;

                installing)
                   logc "Installation in progress.."
                   logc "Status: $INSTALL_STATUS_MSG"
                   ;; 

                installing-pending-user-action)
                   logc "Installation is pending user action, error occured and stopped the install"
                   logc "Output: $INSTALL_STATUS_MSG"
                   ;;

                finalizing)
                   logc "`oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.conditions[3].message}'`"
                   ;;

                installed)
                   logc "Cluster successfully installed"
                   INSTALL_STATUS=1
                   break;
                   ;;

                *)
                   logc "Status unknown"
                   logc "Output: `oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.debugInfo.stateInfo}'`"
                   ;;
              esac

              if [[ $INSTALL_STATUS -eq 1 ]]; then
                break;
              fi

              # wait 5 minutes before checking again cluster status
              logc "Waiting to check cluster status.."
              sleep 300
              ct=$(($ct+1))
            done

            logc "============================="

            END_DATE=`date +%s`
            TOTAL_TIME=`echo $(( $START_DATE - $END_DATE )) | awk '{printf "%d:%02d:%02d", $1/3600, ($1/60)%60, $1%60}'`
            logc "END Cluster monitor install. Total installation time: $TOTAL_TIME"

            if [[ $INSTALL_STATUS -eq 1 ]]; then
              logc "Cluster installation completed, get kubeconfig and kubeadmin password for the cluster"
              
              # For this PoC we just print the password and kubeconfig in the pod log
              # Other options would be to send Slack notification or an email with the cluster access info
              # Using curl instead of getting the secrets because there could be multiple clusters deployed in the same namespace
              KUBECONFIG_URL=`oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.debugInfo.eventsURL}' | sed -e 's#\(.*\)/events?\(.*\)#\1/downloads/kubeconfig?\2#g'`
              KUBEADMIN_URL=`oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.debugInfo.eventsURL}' | sed -e 's#\(.*\)/events?\(.*\)#\1/downloads/files?file_name=kubeadmin-password\&\2#g'`
              logc "Kubeadmin password: "
              curl -k -X GET "$KUBEADMIN_URL" 2>/dev/null
              echo -e "\n"
              logc "Kubeconfig: "
              curl -k -X GET "$KUBECONFIG_URL" 2>/dev/null
              #logc "Kubeadmin password: "
              #oc get secret galaxy-mining-edge-site-a-admin-password -o jsonpath='{.data.password}' | base64 --decode
              #echo -e "\n"
              #logc "Kubeconfig: "
              #oc get secret galaxy-mining-edge-site-a-admin-kubeconfig -o jsonpath='{.data.kubeconfig}' | base64 --decode

              exit 0
            else
              logc "Send notification cluster installation failed"
              # here we can get the detailed logs to troubleshoot why the cluster install failed
              # cluster events
              CLUSTER_EVENTS=`oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.debugInfo.eventsURL}'`
              # logs. note logs are stored in a tar archive
              CLUSTER_LOGS=`oc get agentclusterinstall $AGENT_NAME -o jsonpath='{.status.debugInfo.logsURL}'`
              
              logc "Get cluster install events"
              curl -k -X GET "$CLUSTER_EVENTS"

              logc "Get cluster install logs"
              curl -k -o logs.tar -X GET "$CLUSTER_LOGS"
              tar -xf logs.tar
              tar -zxvf controller_logs.tar.gz
              logc "Install logs:"
              logc "============================="
              cat assisted-installer*  

              exit 1
            fi

            EOF
        name: monitor-cluster-install
        image: registry.redhat.io/openshift4/ose-cli
      restartPolicy: Never
